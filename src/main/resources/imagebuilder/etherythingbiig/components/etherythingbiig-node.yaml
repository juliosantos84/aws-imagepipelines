name: EtherythingbiigNodeProvisioner
description: Provisions an etherythingbiig node.
schemaVersion: 1.0
parameters:
  - SCRIPTS_S3_URL:
      type: string
      default: "${{SCRIPTS_S3_URL}}"
      description: The S3 URL for the scripts asset.
  - SERVICES_S3_URL:
      type: string
      default: "${{SERVICES_S3_URL}}"
      description: The S3 URL for the services asset.
  - GETH_VERSION:
      type: string
      default: "${{GETH_VERSION}}"
      description: The geth version to install.
  - LIGHTHOUSE_VERSION:
      type: string
      default: "${{LIGHTHOUSE_VERSION}}"
      description: The lighthouse version to install.
  - CLOUDWATCH_URL:
      type: string
      default: "https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb"
      description: The AWS CloudWatch download URL.
  - CLOUDWATCH_CONFIG_PARAM:
      type: string
      default: cloudwatch-config
      description: The name of the SSM Parameter that stores the CloudWatch config.
phases:
  - name: 'build'
    steps:
      - name: InstallCfnBootstrap
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 10
        maxAttempts: 1
        inputs:
          commands:
            - set -x
            - |
              AWS_ROOT=/opt/aws
              sudo mkdir -p ${AWS_ROOT}
              sudo chown -R ubuntu:users ${AWS_ROOT}
              curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz --output /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
              tar -xvf /tmp/aws-cfn-bootstrap-py3-latest.tar.gz -C /tmp/
              mv /tmp/aws-cfn-bootstrap-2.0/* ${AWS_ROOT}
              # I hate this, but couldn't pass the right params to the install script
              cd ${AWS_ROOT}
              sudo python3 ${AWS_ROOT}/setup.py install --prefix ${AWS_ROOT} --install-lib /usr/lib/python3.8
              sudo chmod +x ${AWS_ROOT}/bin/*
              sudo ln -s ${AWS_ROOT}/bin/cfn-hup /etc/init.d/cfn-hup
      - name: InstallCommonUtils
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 120
        maxAttempts: 1
        inputs:
          commands:
            - set -x
            - sudo apt update
            - sudo apt install awscli jq unzip -y
      - name: InstallCloudWatchAgent
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 30
        maxAttempts: 1
        inputs:
          commands:
          - |
            set -x
            echo "Downloading CloudWatch Agent from {{CLOUDWATCH_URL}}"
            wget {{CLOUDWATCH_URL}} -O /tmp/amazon-cloudwatch-agent.deb
            echo "Installing /tmp/amazon-cloudwatch-agent.deb"
            sudo dpkg -i -E /tmp/amazon-cloudwatch-agent.deb
      - name: CreateGethUsers
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
            - sudo useradd --no-create-home --shell /bin/false goeth
      - name: InstallGethBinaries
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 30
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - |
            BINARY_NAME=geth-linux-amd64-{{GETH_VERSION}}
            ARCHIVE_NAME=$BINARY_NAME.tar.gz
            curl -L https://gethstore.blob.core.windows.net/builds/$ARCHIVE_NAME --output /tmp/$ARCHIVE_NAME
            sudo tar -xvf /tmp/$ARCHIVE_NAME
            sudo mv ./$BINARY_NAME/geth /usr/local/bin/geth
      - name: CreateLighthouseUsers
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - sudo useradd --no-create-home --shell /bin/false lighthousebeacon
          - sudo useradd --no-create-home --shell /bin/false lighthousevalidator
      - name: InstallLighthouseBinaries
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 30
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - |
            LIGHTHOUSE_ARCHIVE=lighthouse-{{LIGHTHOUSE_VERSION}}-x86_64-unknown-linux-gnu.tar.gz
            LIGHTHOUSE_DOWNLOAD_URL=https://github.com/sigp/lighthouse/releases/download/{{LIGHTHOUSE_VERSION}}/${LIGHTHOUSE_ARCHIVE}
            DOWNLOAD_DIR=/tmp
            echo "Downloading ${LIGHTHOUSE_DOWNLOAD_URL} (${LIGHTHOUSE_ARCHIVE}) to ${DOWNLOAD_DIR}/${LIGHTHOUSE_ARCHIVE}"
            curl -L ${LIGHTHOUSE_DOWNLOAD_URL} --output ${DOWNLOAD_DIR}/${LIGHTHOUSE_ARCHIVE}
            tar -xvf ${DOWNLOAD_DIR}/${LIGHTHOUSE_ARCHIVE}
            sudo mv lighthouse /usr/local/bin/lighthouse
            sudo chown lighthousebeacon:users /usr/local/bin/lighthouse
      - name: InstallPrometheus
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 30
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - |
            echo "Installing prometheus..."

            echo "Creating users..." \
            && sudo useradd --no-create-home --shell /bin/false prometheus \
            && sudo useradd --no-create-home --shell /bin/false node_exporter

            echo "Creating directories..." \
            && sudo mkdir -p /etc/prometheus \
            && sudo chown -R prometheus:prometheus /etc/prometheus \
            && sudo mkdir -p /var/lib/prometheus \
            && sudo chown -R prometheus:prometheus /var/lib/prometheus

            echo "Downloading and installing binaries" \
            && curl -LO https://github.com/prometheus/prometheus/releases/download/v2.20.0/prometheus-2.20.0.linux-amd64.tar.gz \
            && tar xvf prometheus-2.20.0.linux-amd64.tar.gz \
            && sudo cp prometheus-2.20.0.linux-amd64/{prometheus,promtool} /usr/local/bin/ \
            && sudo chown -R prometheus:prometheus /usr/local/bin/{prometheus,promtool} \
            && sudo cp -r prometheus-2.20.0.linux-amd64/consoles /etc/prometheus \
            && sudo cp -r prometheus-2.20.0.linux-amd64/console_libraries /etc/prometheus \
            && sudo chown -R prometheus:prometheus /etc/prometheus/consoles \
            && sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries \
            && rm -rf prometheus-2.20.0.linux-amd64.tar.gz prometheus-2.20.0.linux-amd64

            sudo cat <<PROM_YML >> ./prometheus.yml \
            && sudo mv ./prometheus.yml /etc/prometheus/prometheus.yml \
            && sudo chown -R prometheus:prometheus /etc/prometheus/prometheus.yml
            global:
              scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
              evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
              # scrape_timeout is set to the global default (10s).
            # Alertmanager configuration
            alerting:
              alertmanagers:
              - static_configs:
                - targets:
                  # - alertmanager:9093
            # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
            rule_files:
              # - "first_rules.yml"
              # - "second_rules.yml"
            # A scrape configuration containing exactly one endpoint to scrape:
            # Here it's Prometheus itself.
            scrape_configs:
              - job_name: 'nodes'
                metrics_path: /metrics    
                static_configs:
                  - targets: ['localhost:5054']
              - job_name: 'node_exporter'
                static_configs:
                  - targets: ['localhost:9100']
            PROM_YML
      - name: InstallScripts
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 15
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - aws s3 cp {{SCRIPTS_S3_URL}} /tmp/scripts.zip
          - sudo unzip /tmp/scripts.zip -d /usr/local/bin           
          - sudo chmod 755 /usr/local/bin/*-goeth-volume.sh
          - sudo chmod 755 /usr/local/bin/general/*.sh
          - sudo mv /usr/local/bin/general/*.sh /usr/local/bin
          - sudo chown lighthousebeacon:lighthousebeacon /usr/local/bin/*.sh
          - sudo chown goeth:goeth /usr/local/bin/*-goeth-volume.sh
      - name: InstallServices
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 15
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - aws s3 cp {{SERVICES_S3_URL}} /tmp/services.zip
          - sudo unzip /tmp/services.zip -d /etc/systemd/system
          - sudo systemctl enable geth
          - sudo systemctl enable lighthousebeacon
          - sudo systemctl enable lighthousevalidator
          - sudo systemctl enable prometheus
          - sudo systemctl daemon-reload
          - sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:{{CLOUDWATCH_CONFIG_PARAM}}
      - name: ConfigureMetadata
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
          - set -x
          - |
            echo goeth > /home/ubuntu/volume-name-tag
            echo /var/lib/chaindata > /home/ubuntu/volume-mount-path
  - name: 'test'
    steps:
      - name: TestGethInstall
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
          - |
            set -x
            id -u goeth
            test -x /usr/local/bin/geth
            geth version | grep Version | grep 1.10.8
      - name: TestLighthouseInstall
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
          - |
            set -x
            id -u lighthousebeacon
            id -u lighthousevalidator
            test -x /usr/local/bin/lighthouse
            lighthouse --version | grep {{LIGHTHOUSE_VERSION}}
      - name: TestPrometheusInstall
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
          - |
            set -x
            id -u prometheus
            test -x /usr/local/bin/prometheus
      - name: TestMetadataConfiguration
        action: ExecuteBash
        onFailure: Abort
        timeoutSeconds: 5
        maxAttempts: 1
        inputs:
          commands:
          - |
            set -x
            test "goeth" = "$(cat /home/ubuntu/volume-name-tag)"
            test "/var/lib/chaindata" = "$(cat /home/ubuntu/volume-mount-path)"
